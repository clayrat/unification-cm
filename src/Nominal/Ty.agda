{-# OPTIONS --safe #-}
module Ribeiro.Ty where

open import Prelude

open import Data.Empty hiding (_‚â†_)
open import Data.Bool
open import Data.Reflects as Reflects
open import Data.Dec as Dec
open import Data.Nat
open import Data.Nat.Order.Base

open import Order.Strict
open import Order.Constructions.Nat

-- ids

Id : ùí∞
Id = ‚Ñï

Id‚Çõ : StrictPoset 0‚Ñì 0‚Ñì
Id‚Çõ = ‚Ñï‚Çõ

-- types

data Ty : ùí∞ where
  ``_  : Id ‚Üí Ty
  _‚ü∂_ : Ty ‚Üí Ty ‚Üí Ty
  con  : Ty

module Ty-code where

  Code : Ty ‚Üí Ty ‚Üí ùí∞
  Code (`` x)      (`` y)     = x Ôºù y
  Code (p‚ÇÅ ‚ü∂ q‚ÇÅ) (p‚ÇÇ ‚ü∂ q‚ÇÇ) = Code p‚ÇÅ p‚ÇÇ √ó Code q‚ÇÅ q‚ÇÇ
  Code con         con        = ‚ä§
  Code _           _          = ‚ä•

  code-refl : (t : Ty) ‚Üí Code t t
  code-refl (`` x)   = refl
  code-refl (p ‚ü∂ q) = code-refl p , code-refl q
  code-refl con      = tt

  encode : ‚àÄ {t‚ÇÅ t‚ÇÇ} ‚Üí t‚ÇÅ Ôºù t‚ÇÇ ‚Üí Code t‚ÇÅ t‚ÇÇ
  encode {t‚ÇÅ} e = subst (Code t‚ÇÅ) e (code-refl t‚ÇÅ)

  decode : ‚àÄ {t‚ÇÅ t‚ÇÇ} ‚Üí Code t‚ÇÅ t‚ÇÇ ‚Üí t‚ÇÅ Ôºù t‚ÇÇ
  decode {t‚ÇÅ = `` x}      {t‚ÇÇ = `` y}      c        = ap ``_ c
  decode {t‚ÇÅ = p‚ÇÅ ‚ü∂ q‚ÇÅ} {t‚ÇÇ = p‚ÇÇ ‚ü∂ q‚ÇÇ} (c‚ÇÅ , c‚ÇÇ) = ap¬≤ _‚ü∂_ (decode c‚ÇÅ) (decode c‚ÇÇ)
  decode {t‚ÇÅ = con}       {t‚ÇÇ = con}       c        = refl

``-inj : {x y : ‚Ñï} ‚Üí `` x Ôºù `` y ‚Üí x Ôºù y
``-inj = Ty-code.encode

‚ü∂-inj : ‚àÄ {p‚ÇÅ q‚ÇÅ p‚ÇÇ q‚ÇÇ} ‚Üí p‚ÇÅ ‚ü∂ q‚ÇÅ Ôºù p‚ÇÇ ‚ü∂ q‚ÇÇ ‚Üí (p‚ÇÅ Ôºù p‚ÇÇ) √ó (q‚ÇÅ Ôºù q‚ÇÇ)
‚ü∂-inj e =
  let (c‚ÇÅ , c‚ÇÇ) = Ty-code.encode e in
  Ty-code.decode c‚ÇÅ , Ty-code.decode c‚ÇÇ

``‚â†‚ü∂ : ‚àÄ {x p q} ‚Üí `` x ‚â† p ‚ü∂ q
``‚â†‚ü∂ = Ty-code.encode

``‚â†con : ‚àÄ {x} ‚Üí `` x ‚â† con
``‚â†con = Ty-code.encode

‚ü∂‚â†con : ‚àÄ {p q} ‚Üí p ‚ü∂ q ‚â† con
‚ü∂‚â†con = Ty-code.encode

_==ty_ : Ty ‚Üí Ty ‚Üí Bool
(`` x)      ==ty (`` y)     = x == y
(p‚ÇÅ ‚ü∂ q‚ÇÅ) ==ty (p‚ÇÇ ‚ü∂ q‚ÇÇ) = p‚ÇÅ ==ty p‚ÇÇ and q‚ÇÅ ==ty q‚ÇÇ
con         ==ty con        = true
_           ==ty _          = false

ty-eq-reflects : ‚àÄ {x} {y} ‚Üí Reflects (x Ôºù y) (x ==ty y)
ty-eq-reflects {x = `` x}      {y = `` y}     =
  Reflects.dmap (ap ``_) (contra ``-inj) Reflects-‚Ñï-Path
ty-eq-reflects {x = `` _}      {y = _ ‚ü∂ _}  = of‚Åø ``‚â†‚ü∂
ty-eq-reflects {x = `` _}      {y = con}      = of‚Åø ``‚â†con
ty-eq-reflects {x = _ ‚ü∂ _}   {y = `` _}     = of‚Åø (``‚â†‚ü∂ ‚àò _‚Åª¬π)
ty-eq-reflects {x = p‚ÇÅ ‚ü∂ q‚ÇÅ} {y = p‚ÇÇ ‚ü∂ q‚ÇÇ} =
  Reflects.dmap
    (Œª where (e‚ÇÅ , e‚ÇÇ) ‚Üí ap¬≤ _‚ü∂_ e‚ÇÅ e‚ÇÇ)
    (contra ‚ü∂-inj)
    (Reflects-√ó ‚¶É rp = ty-eq-reflects ‚¶Ñ ‚¶É rq = ty-eq-reflects ‚¶Ñ)
ty-eq-reflects {x = _ ‚ü∂ _}   {y = con}      = of‚Åø ‚ü∂‚â†con
ty-eq-reflects {x = con}       {y = `` _}     = of‚Åø (``‚â†con ‚àò _‚Åª¬π)
ty-eq-reflects {x = con}       {y = _ ‚ü∂ _}  = of‚Åø (‚ü∂‚â†con ‚àò _‚Åª¬π)
ty-eq-reflects {x = con}       {y = con}      = of ∏ refl

instance
  Ty-is-discrete : is-discrete Ty
  Ty-is-discrete {x} {y} .does = x ==ty y
  Ty-is-discrete .proof = ty-eq-reflects

  H-Level-Ty : ‚àÄ {n} ‚Üí H-Level (2 + n) Ty
  H-Level-Ty = hlevel-basic-instance 2 (is-discrete‚Üíis-set auto)
  {-# OVERLAPPING H-Level-Ty #-}

ty-size : Ty ‚Üí ‚Ñï
ty-size (p ‚ü∂ q) = suc (ty-size p + ty-size q)
ty-size _        = 1

0<ty-size : ‚àÄ {t} ‚Üí 0 < ty-size t
0<ty-size {t = `` _}    = z<s
0<ty-size {t = _ ‚ü∂ _} = z<s
0<ty-size {t = con}     = z<s
