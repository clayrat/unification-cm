{-# OPTIONS --safe #-}
module Ribeiro.Unify where

open import Prelude
open import Meta.Effect

open import Data.Empty hiding (_‚â†_)
open import Data.Bool
open import Data.Reflects as Reflects
open import Data.Dec as Dec
open import Data.Nat
open import Data.Nat.Order.Base
open import Data.List as List
open import Data.List.Correspondences.Unary.Any
open import Data.List.Correspondences.Unary.All
open import Data.List.Correspondences.Binary.OPE
open import Data.List.Operations.Properties

open import Data.Sum
open import Data.Plus
open import Data.AF
open import Data.Acc
open import Order.Constructions.Lex

-- ids

Id : ùí∞
Id = ‚Ñï

-- types

data Ty : ùí∞ where
  ``_  : Id ‚Üí Ty
  _‚ü∂_ : Ty ‚Üí Ty ‚Üí Ty
  con  : Ty

module Ty-code where

  Code : Ty ‚Üí Ty ‚Üí ùí∞
  Code (`` x)      (`` y)     = x Ôºù y
  Code (p‚ÇÅ ‚ü∂ q‚ÇÅ) (p‚ÇÇ ‚ü∂ q‚ÇÇ) = Code p‚ÇÅ p‚ÇÇ √ó Code q‚ÇÅ q‚ÇÇ
  Code con         con        = ‚ä§
  Code _           _          = ‚ä•

  code-refl : (t : Ty) ‚Üí Code t t
  code-refl (`` x)   = refl
  code-refl (p ‚ü∂ q) = code-refl p , code-refl q
  code-refl con      = tt

  encode : ‚àÄ {t‚ÇÅ t‚ÇÇ} ‚Üí t‚ÇÅ Ôºù t‚ÇÇ ‚Üí Code t‚ÇÅ t‚ÇÇ
  encode {t‚ÇÅ} e = subst (Code t‚ÇÅ) e (code-refl t‚ÇÅ)

  decode : ‚àÄ {t‚ÇÅ t‚ÇÇ} ‚Üí Code t‚ÇÅ t‚ÇÇ ‚Üí t‚ÇÅ Ôºù t‚ÇÇ
  decode {t‚ÇÅ = `` x}      {t‚ÇÇ = `` y}      c        = ap ``_ c
  decode {t‚ÇÅ = p‚ÇÅ ‚ü∂ q‚ÇÅ} {t‚ÇÇ = p‚ÇÇ ‚ü∂ q‚ÇÇ} (c‚ÇÅ , c‚ÇÇ) = ap¬≤ _‚ü∂_ (decode c‚ÇÅ) (decode c‚ÇÇ)
  decode {t‚ÇÅ = con}       {t‚ÇÇ = con}       c        = refl

``-inj : {x y : ‚Ñï} ‚Üí `` x Ôºù `` y ‚Üí x Ôºù y
``-inj = Ty-code.encode

‚ü∂-inj : ‚àÄ {p‚ÇÅ q‚ÇÅ p‚ÇÇ q‚ÇÇ} ‚Üí p‚ÇÅ ‚ü∂ q‚ÇÅ Ôºù p‚ÇÇ ‚ü∂ q‚ÇÇ ‚Üí (p‚ÇÅ Ôºù p‚ÇÇ) √ó (q‚ÇÅ Ôºù q‚ÇÇ)
‚ü∂-inj e =
  let (c‚ÇÅ , c‚ÇÇ) = Ty-code.encode e in
  Ty-code.decode c‚ÇÅ , Ty-code.decode c‚ÇÇ

``‚â†‚ü∂ : ‚àÄ {x p q} ‚Üí `` x ‚â† p ‚ü∂ q
``‚â†‚ü∂ = Ty-code.encode

``‚â†con : ‚àÄ {x} ‚Üí `` x ‚â† con
``‚â†con = Ty-code.encode

‚ü∂‚â†con : ‚àÄ {p q} ‚Üí p ‚ü∂ q ‚â† con
‚ü∂‚â†con = Ty-code.encode

_==ty_ : Ty ‚Üí Ty ‚Üí Bool
(`` x)      ==ty (`` y)     = x == y
(p‚ÇÅ ‚ü∂ q‚ÇÅ) ==ty (p‚ÇÇ ‚ü∂ q‚ÇÇ) = p‚ÇÅ ==ty p‚ÇÇ and q‚ÇÅ ==ty q‚ÇÇ
con         ==ty con        = true
_           ==ty _          = false

ty-eq-reflects : ‚àÄ {x} {y} ‚Üí Reflects (x Ôºù y) (x ==ty y)
ty-eq-reflects {x = `` x}      {y = `` y}     =
  Reflects.dmap (ap ``_) (contra ``-inj) Reflects-‚Ñï-Path
ty-eq-reflects {x = `` _}      {y = _ ‚ü∂ _}  = of‚Åø ``‚â†‚ü∂
ty-eq-reflects {x = `` _}      {y = con}      = of‚Åø ``‚â†con
ty-eq-reflects {x = _ ‚ü∂ _}   {y = `` _}     = of‚Åø (``‚â†‚ü∂ ‚àò _‚Åª¬π)
ty-eq-reflects {x = p‚ÇÅ ‚ü∂ q‚ÇÅ} {y = p‚ÇÇ ‚ü∂ q‚ÇÇ} =
  Reflects.dmap
    (Œª where (e‚ÇÅ , e‚ÇÇ) ‚Üí ap¬≤ _‚ü∂_ e‚ÇÅ e‚ÇÇ)
    (contra ‚ü∂-inj)
    (Reflects-√ó ‚¶É rp = ty-eq-reflects ‚¶Ñ ‚¶É rq = ty-eq-reflects ‚¶Ñ)
ty-eq-reflects {x = _ ‚ü∂ _}   {y = con}      = of‚Åø ‚ü∂‚â†con
ty-eq-reflects {x = con}       {y = `` _}     = of‚Åø (``‚â†con ‚àò _‚Åª¬π)
ty-eq-reflects {x = con}       {y = _ ‚ü∂ _}  = of‚Åø (‚ü∂‚â†con ‚àò _‚Åª¬π)
ty-eq-reflects {x = con}       {y = con}      = of ∏ refl

instance
  Ty-is-discrete : is-discrete Ty
  Ty-is-discrete {x} {y} .does = x ==ty y
  Ty-is-discrete .proof = ty-eq-reflects

ty-size : Ty ‚Üí ‚Ñï
ty-size (p ‚ü∂ q) = suc (ty-size p + ty-size q)
ty-size _        = 1

0<ty-size : ‚àÄ {t} ‚Üí 0 < ty-size t
0<ty-size {t = `` _}    = z<s
0<ty-size {t = _ ‚ü∂ _} = z<s
0<ty-size {t = con}     = z<s

-- occurs check

occurs : Id ‚Üí Ty ‚Üí ùí∞
occurs v (`` x)    = v Ôºù x
occurs v (p ‚ü∂ q) = occurs v p ‚äé occurs v q
occurs v con       = ‚ä•

occurs? : Id ‚Üí Ty ‚Üí Bool
occurs? v (`` x)    = v == x
occurs? v (p ‚ü∂ q) = occurs? v p or occurs? v q
occurs? v con       = false

occurs-reflects : ‚àÄ {v} {t}
                ‚Üí Reflects (occurs v t) (occurs? v t)
occurs-reflects {t = `` x}    = Reflects-‚Ñï-Path
occurs-reflects {t = p ‚ü∂ q} =
  Reflects-‚äé ‚¶É rp = occurs-reflects {t = p} ‚¶Ñ ‚¶É rq = occurs-reflects {t = q} ‚¶Ñ
occurs-reflects {t = con}     = of‚Åø id

occurs-dec : ‚àÄ {v t} ‚Üí Dec (occurs v t)
occurs-dec {v} {t} .does  = occurs? v t
occurs-dec {v} {t} .proof = occurs-reflects {v} {t}

-- constraints

Constr : ùí∞
Constr = Ty √ó Ty

constr-size : Constr ‚Üí ‚Ñï
constr-size (p , q) = ty-size p + ty-size q

list-measure : List Constr ‚Üí ‚Ñï
list-measure = List.rec 0 Œª c ‚Üí constr-size c +_

-- context of type vars

Varctx : ùí∞
Varctx = List Id

member-end : ‚àÄ {d} {x : Id} ‚Üí x ‚àà (d ‚à∑r x)
member-end = any-‚à∑r-last refl

member-id : ‚àÄ {d1 d2} {x : Id} ‚Üí x ‚àà (d1 ++ x ‚à∑ d2)
member-id = any-++-r (here refl)

rem : Id ‚Üí Varctx ‚Üí Varctx
rem v = filter (not ‚àò _=? v)

remove-length-‚àâ : ‚àÄ {c v} ‚Üí v ‚àâ c ‚Üí length (rem v c) Ôºù length c
remove-length-‚àâ {c} {v} vn =
  ap length $ filter-all $
  true‚Üíso! ‚¶É Reflects-all {xs = c} {P = _‚â† v} Œª x ‚Üí Reflects-¬¨ ‚¶É rp = Reflects-‚Ñï-Path ‚¶Ñ ‚¶Ñ
    (¬¨Any‚ÜíAll¬¨ (contra (any-map _‚Åª¬π) vn))

remove-length-‚àà : ‚àÄ {c v} ‚Üí v ‚àà c ‚Üí length (rem v c) < length c
remove-length-‚àà {c} {v} vi =
  subst (_< length c) (length-filter (Œª x ‚Üí not (x =? _)) c ‚Åª¬π) $
  count<length (Œª z ‚Üí not (z == _)) c $
  any-map (Œª {x} e ‚Üí subst So (not-invol (x == v) ‚Åª¬π) (true‚Üíso! (e ‚Åª¬π))) vi

remove-comm : ‚àÄ {x y c}
            ‚Üí rem x (rem y c) Ôºù rem y (rem x c)
remove-comm {c} = filter-comm {xs = c}

remove-dist : ‚àÄ {x c1 c2} ‚Üí rem x (c1 ++ c2) Ôºù rem x c1 ++ rem x c2
remove-dist {c1} = filter-++ c1

minus : Varctx ‚Üí List Id ‚Üí Varctx
minus c = List.rec c rem

minus-remove : ‚àÄ {c1} c2 {x} ‚Üí minus (rem x c1) c2 Ôºù rem x (minus c1 c2)
minus-remove      []           = refl
minus-remove {c1} (c ‚à∑ c2) {x} =
    ap (rem c) (minus-remove c2)
  ‚àô remove-comm {x = c} {y = x} {c = minus c1 c2}

-- well-formedness

wf-ty : Varctx ‚Üí Ty ‚Üí ùí∞
wf-ty c (`` x)    = x ‚àà c
wf-ty c (p ‚ü∂ q) = wf-ty c p √ó wf-ty c q
wf-ty c con       = ‚ä§

wf-constr-list : Varctx ‚Üí List Constr ‚Üí ùí∞
wf-constr-list c l = All (Œª x ‚Üí wf-ty c (x .fst) √ó wf-ty c (x .snd)) l

wf-ty-end : ‚àÄ {a c} t ‚Üí wf-ty c t ‚Üí wf-ty (c ‚à∑r a) t
wf-ty-end (`` x)    w         = any-‚à∑r-init w
wf-ty-end (p ‚ü∂ q) (wp , wq) = wf-ty-end p wp , wf-ty-end q wq
wf-ty-end con       w         = tt

wf-ty-weaken : ‚àÄ {c1} c2 t ‚Üí wf-ty c1 t ‚Üí wf-ty (c1 ++ c2) t
wf-ty-weaken {c1} []       t w = subst (Œª q ‚Üí wf-ty q t) (++-id-r c1 ‚Åª¬π) w
wf-ty-weaken {c1} (c ‚à∑ c2) t w =
  subst (Œª q ‚Üí wf-ty q t) (++-snoc c1 c2 c) $
  wf-ty-weaken {c1 = c1 ‚à∑r c} c2 t (wf-ty-end t w)

wf-constr-weaken : ‚àÄ {d cs}
                 ‚Üí wf-constr-list d cs
                 ‚Üí ‚àÄ d‚Ä≤ ‚Üí wf-constr-list (d ++ d‚Ä≤) cs
wf-constr-weaken wcl d‚Ä≤ =
  all-map (Œª {x} (w1 , w2) ‚Üí wf-ty-weaken d‚Ä≤ (x .fst) w1 , wf-ty-weaken d‚Ä≤ (x .snd) w2) wcl

wf-constr-weaken-‚à∑r : ‚àÄ {d cs}
                    ‚Üí wf-constr-list d cs
                   ‚Üí ‚àÄ {c} ‚Üí wf-constr-list (d ‚à∑r c) cs
wf-constr-weaken-‚à∑r {d} {cs} wcl {c} =
  subst (Œª q ‚Üí wf-constr-list q cs) (snoc-append d ‚Åª¬π) $
  wf-constr-weaken wcl (c ‚à∑ [])

wf-ty-remove-weak : ‚àÄ {x c} t ‚Üí wf-ty (rem x c) t ‚Üí wf-ty c t
wf-ty-remove-weak (`` x)    w         = ope‚Üísubset filter-OPE w
wf-ty-remove-weak (p ‚ü∂ q) (wp , wq) = wf-ty-remove-weak p wp , wf-ty-remove-weak q wq
wf-ty-remove-weak con       w         = tt

wf-ty-minus-weaken : ‚àÄ {c1} c2 {t} ‚Üí wf-ty (minus c1 c2) t ‚Üí wf-ty c1 t
wf-ty-minus-weaken []                w = w
wf-ty-minus-weaken {c1} (c ‚à∑ c2) {t} w =
  wf-ty-minus-weaken c2 {t = t} $ wf-ty-remove-weak t w

occurs-wf-ty : ‚àÄ {v c} t ‚Üí wf-ty c t ‚Üí ¬¨ occurs v t ‚Üí wf-ty (rem v c) t
occurs-wf-ty (`` x)    w         noc =
  ‚àà-filter (not-so (contra (_‚Åª¬π ‚àò so‚Üítrue!) noc)) w
occurs-wf-ty (p ‚ü∂ q) (wp , wq) noc =
  occurs-wf-ty p wp (contra inl noc) , occurs-wf-ty q wq (contra inr noc)
occurs-wf-ty  con      w         noc = tt

-- set of constraints

Constrs : ùí∞
Constrs = Varctx √ó List Constr

-- substitution

sub : Ty ‚Üí Id ‚Üí Ty ‚Üí Ty
sub t1 x (`` y)    = if x =? y then t1 else `` y
sub t1 x (p ‚ü∂ q) = sub t1 x p ‚ü∂ sub t1 x q
sub t1 x con       = con

sub-occurs : ‚àÄ {t v} u ‚Üí ¬¨ occurs v u ‚Üí u Ôºù sub t v u
sub-occurs {t} (`` x)    noc =
  given-no noc
    return (Œª q ‚Üí (`` x) Ôºù (if ‚åä q ‚åã then t else (`` x)))
    then refl
sub-occurs     (p ‚ü∂ q) noc =
  ap¬≤ _‚ü∂_ (sub-occurs p (contra inl noc)) (sub-occurs q (contra inr noc))
sub-occurs      con      noc = refl

subst-rem : ‚àÄ {x c} t
          ‚Üí wf-ty c t ‚Üí x ‚àà c
          ‚Üí ‚àÄ u ‚Üí wf-ty (rem x c) u ‚Üí wf-ty (rem x c) (sub u x t)
subst-rem {x} {c} (`` y)    w         xin u wr =
  Dec.elim
    {C = Œª q ‚Üí wf-ty (rem x c) (if ‚åä q ‚åã then u else (`` y))}
    (Œª _ ‚Üí wr)
    (Œª ¬¨p ‚Üí ‚àà-filter (not-so (contra (_‚Åª¬π ‚àò so‚Üítrue!) ¬¨p)) w)
    (x ‚âü y)
subst-rem        (p ‚ü∂ q) (wp , wq) xin u wr =
  subst-rem p wp xin u wr , subst-rem q wq xin u wr
subst-rem         con      w         xin u wr = tt

Substitution : ùí∞
Substitution = List (Id √ó Ty)

dom : Substitution ‚Üí List Id
dom = map fst

wf-subst : Varctx ‚Üí Substitution ‚Üí ùí∞
wf-subst c []            = ‚ä§
wf-subst c ((v , t) ‚à∑ s) = v ‚àà c √ó wf-ty (rem v c) t √ó wf-subst (rem v c) s

apply-subst : Substitution ‚Üí Ty ‚Üí Ty
apply-subst s t = fold-l (Œª t‚Ä≤ (v , q) ‚Üí sub q v t‚Ä≤) t s

substs-remove : ‚àÄ {c t} s ‚Üí wf-subst c s ‚Üí wf-ty c t ‚Üí wf-ty (minus c (dom s)) (apply-subst s t)
substs-remove          []             _             w = w
substs-remove {c} {t} ((i , t1) ‚à∑ s) (ic , wt , ws) w =
  subst (Œª q ‚Üí wf-ty q (apply-subst s (sub t1 i t))) (minus-remove (dom s)) $
  substs-remove {c = rem i c} {t = sub t1 i t} s ws (subst-rem t w ic t1 wt)

minus-app : ‚àÄ {c} s {v t} ‚Üí minus c (dom (s ‚à∑r (v , t))) Ôºù rem v (minus c (dom s))
minus-app {c} s =
    ap (minus c) (map-‚à∑r {xs = s})
  ‚àô rec-‚à∑r {xs = dom s}
  ‚àô minus-remove (dom s)

apply-subst-id : ‚àÄ {t} ‚Üí apply-subst [] t Ôºù t
apply-subst-id = refl

apply-subst-con : ‚àÄ {s} ‚Üí apply-subst s con Ôºù con
apply-subst-con {s = []}    = refl
apply-subst-con {s = x ‚à∑ s} = apply-subst-con {s = s}

apply-subst-app : ‚àÄ {p q s} ‚Üí apply-subst s (p ‚ü∂ q) Ôºù apply-subst s p ‚ü∂ apply-subst s q
apply-subst-app {s = []}          = refl
apply-subst-app {s = (i , t) ‚à∑ s} = apply-subst-app {s = s}

apply-subst-end : ‚àÄ {s v t t‚Ä≤} ‚Üí apply-subst (s ‚à∑r (v , t)) t‚Ä≤ Ôºù sub t v (apply-subst s t‚Ä≤)
apply-subst-end {s} {v} {t} {t‚Ä≤} = foldl-‚à∑r t‚Ä≤ (Œª t‚Ä≤ (v , q) ‚Üí sub q v t‚Ä≤) s (v , t)

apply-subst-append : ‚àÄ {s1 s2 t} ‚Üí apply-subst (s1 ++ s2) t Ôºù apply-subst s2 (apply-subst s1 t)
apply-subst-append {s1} {s2} {t} = foldl-++ t (Œª t‚Ä≤ (v , q) ‚Üí sub q v t‚Ä≤) s1 s2

apply-subst-idem : ‚àÄ {d s t} ‚Üí wf-ty (minus d (dom s)) t ‚Üí apply-subst s t Ôºù t
apply-subst-idem     {s = []}          {t = `` v}    wt       = refl
apply-subst-idem {d} {s = (i , t) ‚à∑ s} {t = `` v}    wt       =
  Dec.elim
    {C = Œª q ‚Üí apply-subst s (if ‚åä q ‚åã then t else (`` v)) Ôºù (`` v)}
    (Œª evx ‚Üí absurd ((so-not $ fst $ filter-‚àà {xs = minus d (dom s)} wt) (true‚Üíso! (evx ‚Åª¬π))))
    (Œª _ ‚Üí apply-subst-idem {d = d} {s = s} (filter-‚àà wt .snd))
    (i ‚âü v)
apply-subst-idem     {s}               {t = p ‚ü∂ q} (wp , wq) =
    apply-subst-app {s = s}
  ‚àô ap¬≤ _‚ü∂_ (apply-subst-idem {s = s} wp) (apply-subst-idem {s = s} wq)
apply-subst-idem     {s}               {t = con}     wt        =
  apply-subst-con {s}

gen-only-add : ‚àÄ {s c1 c2}
             ‚Üí (‚àÄ {t1 t2} ‚Üí (t1 , t2) ‚àà (c2 ++ c1) ‚Üí apply-subst s t1 Ôºù apply-subst s t2)
             ‚Üí ‚àÄ {t1 t2} ‚Üí (t1 , t2) ‚àà c1 ‚Üí apply-subst s t1 Ôºù apply-subst s t2
gen-only-add          {c2 = []}           h mem = h mem
gen-only-add {s} {c1} {c2 = (l , r) ‚à∑ c2} h mem =
  gen-only-add {s = s} {c1 = c1} {c2 = c2} (h ‚àò there) mem

wf-subst-last : ‚àÄ {x t c} s
              ‚Üí wf-subst c s
              ‚Üí x ‚àà minus c (dom s)
              ‚Üí wf-ty (rem x (minus c (dom s))) t
              ‚Üí wf-subst c (s ‚à∑r (x , t))
wf-subst-last             []             ws             xi w = xi , w , tt
wf-subst-last {x} {t} {c} ((v , t‚Ä≤) ‚à∑ s) (vi , wr , ws) xi w =
    vi , wr
  , wf-subst-last {c = rem v c} s ws
     (subst (x ‚àà_) (minus-remove (dom s) ‚Åª¬π) xi)
     (subst (Œª q ‚Üí wf-ty (rem x q) t) (minus-remove (dom s) ‚Åª¬π) w)

wf-subst-append : ‚àÄ {c s1} s2 ‚Üí wf-subst c s1 ‚Üí wf-subst (minus c (dom s1)) s2 ‚Üí wf-subst c (s1 ++ s2)
wf-subst-append {c} {s1} []             w1 w2             = subst (wf-subst c) (++-id-r s1 ‚Åª¬π) w1
wf-subst-append {c} {s1} ((v , t) ‚à∑ s2) w1 (ci , wt , w2) =
  subst (wf-subst c) (ap (_++ s2) (snoc-append s1) ‚àô ++-assoc s1 ((v , t) ‚à∑ []) s2) $
  wf-subst-append {c = c} {s1 = s1 ‚à∑r (v , t)} s2
    (wf-subst-last s1 w1 ci wt)
    (subst (Œª q ‚Üí wf-subst q s2) (minus-app s1 ‚Åª¬π) w2)

app-subst-eq : ‚àÄ {l l‚Ä≤ r r‚Ä≤ s}
             ‚Üí apply-subst s l Ôºù apply-subst s l‚Ä≤
             ‚Üí apply-subst s r Ôºù apply-subst s r‚Ä≤
             ‚Üí apply-subst s (l ‚ü∂ r) Ôºù apply-subst s (l‚Ä≤ ‚ü∂ r‚Ä≤)
app-subst-eq {s} eql eqr =
    apply-subst-app {s = s}
  ‚àô ap¬≤ _‚ü∂_ eql eqr
  ‚àô apply-subst-app {s = s} ‚Åª¬π

unapp-subst-eq : ‚àÄ {l l‚Ä≤ r r‚Ä≤ s}
               ‚Üí apply-subst s (l ‚ü∂ r) Ôºù apply-subst s (l‚Ä≤ ‚ü∂ r‚Ä≤)
               ‚Üí (apply-subst s l Ôºù apply-subst s l‚Ä≤) √ó (apply-subst s r Ôºù apply-subst s r‚Ä≤)
unapp-subst-eq {s} eq =
  ‚ü∂-inj (apply-subst-app {s = s} ‚Åª¬π ‚àô eq ‚àô apply-subst-app {s = s})

ext-subst-var-ty : ‚àÄ {s s‚Ä≤}
                 ‚Üí (‚àÄ {v} ‚Üí apply-subst s (`` v) Ôºù apply-subst s‚Ä≤ (`` v))
                 ‚Üí ‚àÄ t ‚Üí apply-subst s t Ôºù apply-subst s‚Ä≤ t
ext-subst-var-ty          ex (`` x)    = ex
ext-subst-var-ty {s} {s‚Ä≤} ex (p ‚ü∂ q) =
    apply-subst-app {p = p} {q = q} {s = s}
  ‚àô ap¬≤ _‚ü∂_ (ext-subst-var-ty {s = s} {s‚Ä≤ = s‚Ä≤} ex p) (ext-subst-var-ty {s = s} {s‚Ä≤ = s‚Ä≤} ex q)
  ‚àô apply-subst-app {p = p} {q = q} {s = s‚Ä≤} ‚Åª¬π
ext-subst-var-ty {s} {s‚Ä≤} ex con       =
  apply-subst-con {s = s} ‚àô apply-subst-con {s = s‚Ä≤} ‚Åª¬π

apply-subst-constrs : Substitution ‚Üí List Constr ‚Üí List Constr
apply-subst-constrs s = map Œª (x , y) ‚Üí apply-subst s x , apply-subst s y

wf-constr-list-remove : ‚àÄ {c v t}
                      ‚Üí v ‚àà c ‚Üí ¬¨ occurs v t ‚Üí wf-ty c t
                      ‚Üí ‚àÄ {l} ‚Üí wf-constr-list c l
                      ‚Üí wf-constr-list (rem v c) (apply-subst-constrs ((v , t) ‚à∑ []) l)
wf-constr-list-remove {t} vi noc w =
  all‚Üímap ‚àò
  all-map
    Œª {x} (wl , wr) ‚Üí
        let wrem = occurs-wf-ty t w noc in
        subst-rem (x .fst) wl vi t wrem , subst-rem (x .snd) wr vi t wrem

-- constraint order

_<C_ : Constrs ‚Üí Constrs ‚Üí ùí∞
_<C_ = √ó-lex (Œª v‚ÇÅ v‚ÇÇ ‚Üí length v‚ÇÅ < length v‚ÇÇ) (Œª c‚ÇÅ c‚ÇÇ ‚Üí list-measure c‚ÇÅ < list-measure c‚ÇÇ)

_‚â§C_ : Constrs ‚Üí Constrs ‚Üí ùí∞
(v‚ÇÅ , c‚ÇÅ) ‚â§C (v‚ÇÇ , c‚ÇÇ) = (length v‚ÇÅ ‚â§ length v‚ÇÇ) √ó (list-measure c‚ÇÅ ‚â§ list-measure c‚ÇÇ)

‚â§C-af : AF _‚â§C_
‚â§C-af = af-√ó (af-comap length af-‚â§) (af-comap list-measure af-‚â§)

<‚à©‚â§C=‚àÖ : ‚àÄ {v‚ÇÅ c‚ÇÅ v‚ÇÇ c‚ÇÇ}
              ‚Üí Plus _<C_ (v‚ÇÅ , c‚ÇÅ) (v‚ÇÇ , c‚ÇÇ)
              ‚Üí (v‚ÇÇ , c‚ÇÇ) ‚â§C (v‚ÇÅ , c‚ÇÅ)
              ‚Üí ‚ä•
<‚à©‚â§C=‚àÖ {v‚ÇÅ} {c‚ÇÅ} {v‚ÇÇ} {c‚ÇÇ} p (le‚ÇÅ , le‚ÇÇ) =
  [ ‚â§‚Üí‚âØ le‚ÇÅ , ‚â§‚Üí‚âØ le‚ÇÇ ‚àò snd ]·µ§
   (plus-fold1
      (record { _‚àô_ = Œª {x} {y} {z} ‚Üí
              √ó-lex-trans <-trans <-trans {pqx = x} {pqy = y} {pqz = z}})
       p)

<C-wf : is-wf _<C_
<C-wf = AF‚ÜíWF ‚â§C-af <‚à©‚â§C=‚àÖ

lt-list-constr-lt-measure : ‚àÄ {t t‚Ä≤ l} ‚Üí list-measure l < list-measure ((t , t‚Ä≤) ‚à∑ l)
lt-list-constr-lt-measure {t} = <-+-0lr $ <-+-r $ 0<ty-size {t = t}

lt-list-constr-lt-constraints : ‚àÄ {t t‚Ä≤ c l} ‚Üí (c , l) <C (c , (t , t‚Ä≤) ‚à∑ l)
lt-list-constr-lt-constraints {t} {t‚Ä≤} {l} =
  inr (refl , lt-list-constr-lt-measure {t = t} {t‚Ä≤ = t‚Ä≤} {l = l})

app-lt-measure : ‚àÄ {l l‚Ä≤ r r‚Ä≤ lc}
               ‚Üí list-measure ((l , l‚Ä≤) ‚à∑ (r , r‚Ä≤) ‚à∑ lc) < list-measure ((l ‚ü∂ r , l‚Ä≤ ‚ü∂ r‚Ä≤) ‚à∑ lc)
app-lt-measure {l} {l‚Ä≤} {r} {r‚Ä≤} {lc} =
  subst (_< list-measure ((l ‚ü∂ r , l‚Ä≤ ‚ü∂ r‚Ä≤) ‚à∑ lc))
        (+-assoc (ty-size l + ty-size l‚Ä≤) (ty-size r + ty-size r‚Ä≤) (list-measure lc) ‚Åª¬π) $
  <-‚â§-+ {m = ty-size l + ty-size l‚Ä≤ + (ty-size r + ty-size r‚Ä≤)}
    (subst (Œª q ‚Üí ty-size l + ty-size l‚Ä≤ + (ty-size r + ty-size r‚Ä≤) < suc q)
           (+-suc-r (ty-size l + ty-size r) (ty-size l‚Ä≤ + ty-size r‚Ä≤) ‚Åª¬π) $
     subst (Œª q ‚Üí ty-size l + ty-size l‚Ä≤ + (ty-size r + ty-size r‚Ä≤) < suc (suc q))
           (+-interchange (ty-size l) (ty-size l‚Ä≤) (ty-size r) (ty-size r‚Ä≤)) $
     <-+-lr {n = 1})
    (=‚Üí‚â§ refl)

app-lt-constraints : ‚àÄ {l l‚Ä≤ r r‚Ä≤ lc c}
                   ‚Üí (c , (l , l‚Ä≤) ‚à∑ (r , r‚Ä≤) ‚à∑ lc) <C (c , (l ‚ü∂ r , l‚Ä≤ ‚ü∂ r‚Ä≤) ‚à∑ lc)
app-lt-constraints {l} {l‚Ä≤} {r} {r‚Ä≤} {lc} =
  inr (refl , app-lt-measure {l = l} {l‚Ä≤ = l‚Ä≤} {r = r} {r‚Ä≤ = r‚Ä≤} {lc = lc})

varctxt-lt-constraints-varl : ‚àÄ {c v t l}
                            ‚Üí v ‚àà c
                            ‚Üí (rem v c , apply-subst-constrs ((v , t) ‚à∑ []) l) <C (c , (t , `` v) ‚à∑ l)
varctxt-lt-constraints-varl vi = inl (remove-length-‚àà vi)

varctxt-lt-constraints-varr : ‚àÄ {c v t l}
                            ‚Üí v ‚àà c
                            ‚Üí (rem v c , apply-subst-constrs ((v , t) ‚à∑ []) l) <C (c , (`` v , t) ‚à∑ l)
varctxt-lt-constraints-varr vi = inl (remove-length-‚àà vi)

-- unifier

unifier : List Constr ‚Üí Substitution ‚Üí ùí∞
unifier cs s = All (Œª (l , r) ‚Üí apply-subst s l Ôºù apply-subst s r) cs

unifier-append : ‚àÄ {v t s} l
               ‚Üí unifier (apply-subst-constrs ((v , t) ‚à∑ []) l) s
               ‚Üí unifier l ((v , t) ‚à∑ s)
unifier-append     []                   u  = []
unifier-append {s} ((tl , tr) ‚à∑ l) (e ‚à∑ u) = e ‚à∑ unifier-append {s = s} l u

unify-ty : ‚àÄ {v t' s} t
         ‚Üí apply-subst s (`` v) Ôºù apply-subst s t'
         ‚Üí apply-subst s t Ôºù apply-subst s (sub t' v t)
unify-ty {v} {t'} {s} (`` x)    ea =
  Dec.elim
    {C = Œª q ‚Üí apply-subst s (`` x) Ôºù apply-subst s (if ‚åä q ‚åã then t' else (`` x))}
    (Œª evx ‚Üí ap (apply-subst s ‚àò ``_) (evx ‚Åª¬π)  ‚àô ea)
    (Œª _ ‚Üí refl)
    (v ‚âü x)
unify-ty         {s} (p ‚ü∂ q) ea =
  app-subst-eq {s = s} (unify-ty {s = s} p ea) (unify-ty {s = s} q ea)
unify-ty              con      ea = refl

unifier-subst : ‚àÄ {v t s} l
              ‚Üí apply-subst s (`` v) Ôºù apply-subst s t
              ‚Üí unifier l s
              ‚Üí unifier (apply-subst-constrs ((v , t) ‚à∑ []) l) s
unifier-subst     []              ea       u  = []
unifier-subst {s} ((tl , tr) ‚à∑ l) ea (et ‚à∑ u) =
  unify-ty {s = s} tl ea ‚Åª¬π ‚àô et ‚àô unify-ty {s = s} tr ea ‚à∑ unifier-subst {s = s} l ea u

-- failure

data UnifyFailure : List Constr ‚Üí ùí∞ where
  occ-fail-l : ‚àÄ {v t lc}
             ‚Üí occurs v t ‚Üí UnifyFailure ((`` v , t) ‚à∑ lc)
  occ-fail-r : ‚àÄ {v t lc}
             ‚Üí occurs v t ‚Üí UnifyFailure ((t , `` v) ‚à∑ lc)
  con-app    : ‚àÄ {l r lc}
             ‚Üí UnifyFailure ((con , l ‚ü∂ r) ‚à∑ lc)
  app-con    : ‚àÄ {l r lc}
             ‚Üí UnifyFailure ((l ‚ü∂ r , con) ‚à∑ lc)
  -- seems unused ?
  -- app-left   : ‚àÄ {l l' r r' lc}
  --            ‚Üí UnifyFailure ((l , l') ‚à∑ lc) ‚Üí UnifyFailure ((l ‚ü∂ r , l' ‚ü∂ r') ‚à∑ lc)
  app-right  : ‚àÄ {l l' r r' lc}
             ‚Üí UnifyFailure ((l , l') ‚à∑ (r , r') ‚à∑ lc) ‚Üí UnifyFailure ((l ‚ü∂ r , l' ‚ü∂ r') ‚à∑ lc)
  constr-rec : ‚àÄ {t t' l}
             ‚Üí UnifyFailure l ‚Üí UnifyFailure ((t , t') ‚à∑ l)
  subs-rec   : ‚àÄ {t t' s l}
             ‚Üí UnifyFailure (apply-subst-constrs s l) ‚Üí UnifyFailure ((t , t') ‚à∑ l)

-- main algorithm

unify-type : Constrs ‚Üí ùí∞
unify-type (ctx , lc) =
  wf-constr-list ctx lc ‚Üí
  (Œ£[ s Íûâ Substitution ]
     (unifier lc s √ó wf-subst ctx s
      √ó (‚àÄ {s‚Ä≤} ‚Üí unifier lc s‚Ä≤
          ‚Üí Œ£[ s‚Ä≥ Íûâ Substitution ]
            (‚àÄ {v} ‚Üí apply-subst s‚Ä≤ (`` v) Ôºù apply-subst (s ++ s‚Ä≥) (`` v)))) )
  ‚äé UnifyFailure lc

unify-body : (l : Constrs)
           ‚Üí (ih : (l' : Constrs) ‚Üí l' <C l ‚Üí unify-type l')
           ‚Üí unify-type l
unify-body (ctx , [])             ih _   = inl ([] , [] , tt , Œª {s‚Ä≤} _ ‚Üí s‚Ä≤ , refl)
unify-body (ctx , (tl , tr) ‚à∑ lc) ih wcl with tl ‚âü tr
unify-body (ctx , (tl , tr) ‚à∑ lc) ih wcl | yes e with ih (ctx , lc)
                                                         (lt-list-constr-lt-constraints {t = tl} {t‚Ä≤ = tr} {l = lc})
                                                         (all-tail wcl)
unify-body (ctx , (tl , tr) ‚à∑ lc) ih wcl | yes e | inl (s , us , ws , sprf) =
  inl (s , ap (apply-subst s) e ‚à∑ us , ws , Œª {s‚Ä≤} ‚Üí sprf {s‚Ä≤} ‚àò all-tail)
unify-body (ctx , (tl , tr) ‚à∑ lc) ih wcl | yes e | inr uf = inr (constr-rec uf)
unify-body (ctx , (`` v      , tr)        ‚à∑ lc) ih wcl | no ne with occurs-dec {v} {t = tr}
unify-body (ctx , (`` v      , tr)        ‚à∑ lc) ih wcl | no ne | yes oc = inr (occ-fail-l oc)
unify-body (ctx , (`` v      , tr)        ‚à∑ lc) ih wcl | no ne | no noc with ih (rem v ctx , apply-subst-constrs ((v , tr) ‚à∑ []) lc)
                                                                                (varctxt-lt-constraints-varr {t = tr} {l = lc} (all-head wcl .fst))
                                                                                (wf-constr-list-remove (all-head wcl .fst) noc (all-head wcl .snd) (all-tail wcl))
unify-body (ctx , (`` v      , tr)        ‚à∑ lc) ih wcl | no ne | no noc | inl (s , us , ws , sprf) =
  inl ( (v , tr) ‚à∑ s
      , unifier-append {s = s} ((`` v , tr) ‚à∑ lc)
          (ap (apply-subst s) (given-yes (the (v Ôºù v) refl)
                                 return (Œª q ‚Üí (if ‚åä q ‚åã then tr else (`` v)) Ôºù sub tr v tr)
                                 then sub-occurs tr noc)
           ‚à∑ us)
      , (all-head wcl .fst , occurs-wf-ty tr (all-head wcl .snd) noc , ws)
      , Œª {s‚Ä≤} u‚Ä≤ ‚Üí let (ah , at) = all-uncons u‚Ä≤
                        (s‚Ä≥ , prf) = sprf {s‚Ä≤ = s‚Ä≤} (unifier-subst {s = s‚Ä≤} lc ah at)
                      in
                    s‚Ä≥ , Œª {v = v‚Ä≤} ‚Üí
                           unify-ty {v = v} {s = s‚Ä≤} (`` v‚Ä≤) ah
                         ‚àô ext-subst-var-ty {s = s‚Ä≤} {s‚Ä≤ = s ++ s‚Ä≥} prf (sub tr v (`` v‚Ä≤)))
unify-body (ctx , (`` v      , tr)        ‚à∑ lc) ih wcl | no ne | no noc | inr uf = inr (subs-rec {s = (v , tr) ‚à∑ []} uf)
unify-body (ctx , (pl ‚ü∂ ql , pr ‚ü∂ qr)  ‚à∑ lc) ih wcl | no ne with ih (ctx , (pl , pr) ‚à∑ (ql , qr) ‚à∑ lc)
                                                                       (app-lt-constraints {l = pl} {l‚Ä≤ = pr} {r = ql} {r‚Ä≤ = qr} {lc = lc})
                                                                       (  (all-head wcl .fst .fst , all-head wcl .snd .fst)
                                                                        ‚à∑ (all-head wcl .fst .snd , all-head wcl .snd .snd)
                                                                        ‚à∑ all-tail wcl)
unify-body (ctx , (pl ‚ü∂ ql , pr ‚ü∂ qr)  ‚à∑ lc) ih wcl | no ne | inl (s , us , ws , sprf) =
  inl ( s
      , app-subst-eq {s = s} (all-head us) (all-head $ all-tail us) ‚à∑ all-tail (all-tail us)
      , ws
      , Œª {s‚Ä≤} u‚Ä≤ ‚Üí sprf {s‚Ä≤ = s‚Ä≤} (let (a1 , a2) = unapp-subst-eq {s = s‚Ä≤} (all-head u‚Ä≤) in
                                    a1 ‚à∑ a2 ‚à∑ all-tail u‚Ä≤))
unify-body (ctx , (pl ‚ü∂ ql , pr ‚ü∂ qr)  ‚à∑ lc) ih wcl | no ne | inr uf = inr (app-right uf)
unify-body (ctx , (pl ‚ü∂ ql , con)       ‚à∑ lc) ih wcl | no ne = inr app-con
unify-body (ctx , (con       , pr ‚ü∂ qr) ‚à∑ lc) ih wcl | no ne = inr con-app
unify-body (ctx , (con       , con)       ‚à∑ lc) ih wcl | no ne = absurd (ne refl)
unify-body (ctx , (tl        , `` v)      ‚à∑ lc) ih wcl | no ne with occurs-dec {v} {t = tl}
unify-body (ctx , (tl        , `` v)      ‚à∑ lc) ih wcl | no ne | yes oc = inr (occ-fail-r oc)
unify-body (ctx , (tl        , `` v)      ‚à∑ lc) ih wcl | no ne | no noc with ih (rem v ctx , apply-subst-constrs ((v , tl) ‚à∑ []) lc)
                                                                                (varctxt-lt-constraints-varl {t = tl} {l = lc} (all-head wcl .snd))
                                                                                (wf-constr-list-remove (all-head wcl .snd) noc (all-head wcl .fst) (all-tail wcl))
unify-body (ctx , (tl        , `` v)      ‚à∑ lc) ih wcl | no ne | no noc | inl (s , us , ws , sprf) =
  inl ( (v , tl) ‚à∑ s
      , unifier-append {s = s} ((tl , `` v) ‚à∑ lc)
           (ap (apply-subst s) (given-yes (the (v Ôºù v) refl)
                                 return (Œª q ‚Üí sub tl v tl Ôºù (if ‚åä q ‚åã then tl else (`` v)))
                                 then (sub-occurs tl noc ‚Åª¬π)) ‚à∑ us)
      , (all-head wcl .snd , occurs-wf-ty tl (all-head wcl .fst) noc , ws)
      , Œª {s‚Ä≤} u‚Ä≤ ‚Üí let (ah , at) = all-uncons u‚Ä≤
                        (s‚Ä≥ , prf) = sprf {s‚Ä≤ = s‚Ä≤} (unifier-subst {s = s‚Ä≤} lc (ah ‚Åª¬π) at)
                      in
                    s‚Ä≥ , Œª {v = v‚Ä≤} ‚Üí
                           unify-ty {v = v} {s = s‚Ä≤} (`` v‚Ä≤) (ah ‚Åª¬π)
                         ‚àô ext-subst-var-ty {s = s‚Ä≤} {s‚Ä≤ = s ++ s‚Ä≥} prf (sub tl v (`` v‚Ä≤)))
unify-body (ctx , (tl        , `` v)      ‚à∑ lc) ih wcl | no ne | no noc | inr uf = inr (subs-rec {s = (v , tl) ‚à∑ []} uf)

unify : (l : Constrs) ‚Üí unify-type l
unify = to-induction <C-wf unify-type unify-body
